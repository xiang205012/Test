
    我们知道在oncreate中View.getWidth和View.getHeight无法获得一个view的高度和宽度，
    这是因为View组件布局要在onResume回调后完成。
    所以现在需要使用getViewTreeObserver().addOnGlobalLayoutListener()来获得宽度或者高度。
    这是获得一个view的宽度和高度的方法之一。

    OnGlobalLayoutListener 是ViewTreeObserver的内部类，
    当一个视图树的布局发生改变时，可以被ViewTreeObserver监听到，
    这是一个注册监听视图树的观察者(observer)，在视图树的全局事件改变时得到通知。
    ViewTreeObserver不能直接实例化，而是通过getViewTreeObserver()获得。

    除了OnGlobalLayoutListener ，ViewTreeObserver还有如下内部类：
    interfaceViewTreeObserver.OnGlobalFocusChangeListener

    当在一个视图树中的焦点状态发生改变时，所要调用的回调函数的接口类
    interfaceViewTreeObserver.OnGlobalLayoutListener

    当在一个视图树中全局布局发生改变或者视图树中的某个视图的可视状态发生改变时，所要调用的回调函数的接口类
    interfaceViewTreeObserver.OnPreDrawListener

    当一个视图树将要绘制时，所要调用的回调函数的接口类
    interfaceViewTreeObserver.OnScrollChangedListener

    当一个视图树中的一些组件发生滚动时，所要调用的回调函数的接口类
    interfaceViewTreeObserver.OnTouchModeChangeListener

    当一个视图树的触摸模式发生改变时，所要调用的回调函数的接口类

    其中，我们可以利用OnGlobalLayoutListener来获得一个视图的真实高度。

    private int mHeaderViewHeight;
    private View mHeaderView;

    .....

    mHeaderView.getViewTreeObserver().addOnGlobalLayoutListener(
        new OnGlobalLayoutListener() {
            @Override
            public void onGlobalLayout() {

                mHeaderViewHeight = mHeaderView.getHeight();
                mHeaderView.getViewTreeObserver()
                        .removeGlobalOnLayoutListener(this);
            }
    });


    但是需要注意的是OnGlobalLayoutListener可能会被多次触发，
    因此在得到了高度之后，要将OnGlobalLayoutListener注销掉。
    另外mHeaderViewHeight和mHeaderView都需要写在当前java文件类（比如Activity）的成员变量中。
    不能直接在onCreate中定义否则会编译不通过：
    Cannot refer to a non-final variable sHeight inside an inner class defined in a different method




    onAttachedToWindow ():

        This is called when the view is attached to a window.
         At this point it has a Surface and will start drawing.
         Note that this function is guaranteed to be called beforeonDraw(android.graphics.Canvas),
          however it may be called any time before the first onDraw
          -- including before or after onMeasure(int, int).

        从API说明我们可以定位当View附加到窗体时，也就是View和Window绑定时就会调用这个函数，
        此时将会有一个Surface进行绘图之类的逻辑。并且发现Window.CallBack是一个接口类，
        而且官方引导到了View中，那么可以大胆判断View实现了Window.CallBack的回调方法，
        那么View和Window之间的关系便可以有个初步猜测。下篇博客再具体讨论DecorView和Window之间的关系。

        接下来通过实验判断onAttachedToWindow在Activity整个生命周期中的位置。
        看来我们最终要找的生命周期为onCreate->onStart->onResume->onAttachedToWindow
        详见http://staticfree.info/~steve/complete_android_fragment_lifecycle.svg

        总结：
            onAttachedToWindow运行在onResume之后；
            DecorView的LayoutParams是在ActivityThread的handleResumeActivity中设置的，
            并且该函数会调用Activity的onResume生命周期，所以在onResume之后可以设置窗体尺寸；


    onDetachedFromWindow():
        将视图从窗体上分离的时候调用该方法。这时视图已经不具有可绘制部分。
        onDetachedFromWindow()正好与onAttachedToWindow()的用法相对应，在destroy view的时候调用




    onAttachedToWindow () 和 onDetachedFromWindow () ;
    以及更新视图的函数ondraw() 和dispatchdraw()的区别

        protected void onAttachedToWindow()
            This
            is called when the view is attached to a window. At this point it has a Surface and will    start
            drawing. Note that this function is guaranteed to be called  before
            onDraw(android.graphics.Canvas)
            ,
            however it may be called any time before the first  onDraw -- including before or after
            onMeasure(int,
            int)
            .

        如果你在自己的view中Override了这个方法。那么我们最关注的是它什么时候调用？

        从开发文档中我们可以看出，onAttachedToWindow是在第一次onDraw前调用的。
        也就是我们写的View在没有绘制出来时调用的，但只会调用一次。


        比如，我们写状态栏中的时钟的View，在onAttachedToWindow这方法中做初始化工作，比如注册一些广播等等……

            与onAttachedToWindow 相反的则是这个方法：
        protected void onDetachedFromWindow()
        Since: API
        Level 1

        This is called when the view is detached from a window.
        At this point it no longer has a surface for drawing.


        开发文档就简单的两句。也就是我们销毁View的时候。我们写的这个View不再显示。

        这时我们就在这个方法做一些收尾工作，如：取消广播注册等等。

        关于在Activity中什么时候调用onAttachedToWindow()和onDetachedFromWindow()，
        我通常测试打了下log，发现onAttachedToWindow()在onResume()之后运行，
        onDetachedFromWindow()则在onDestory()之后才会调用。


    更新视图的函数onDraw()和dispatchdraw()的区别

        绘制VIew本身的内容，通过调用View.onDraw(canvas)函数实现

        绘制自己的孩子通过dispatchDraw（canvas）实现

        View组件的绘制会调用draw(Canvas canvas)方法，draw过程中主要是先画Drawable背景，
        对 drawable调用setBounds()，然后是draw(Canvas c)方法。
        有点注意的是背景drawable的实际大小会影响view组件的大小，
        drawable的实际大小通过getIntrinsicWidth()和getIntrinsicHeight()获取，
        当背景比较大时view组件大小等于背景drawable的大小。

        画完背景后，draw过程会调用onDraw(Canvas canvas)方法，
        然后就是dispatchDraw(Canvas canvas)方法，
        dispatchDraw()主要是分发给子组件进行绘制，
        我们通常定制组件的时候重写的是onDraw()方法。
        值得注意的是ViewGroup容器组件的绘制，
        当它没有背景时直接调用的是dispatchDraw()方法,
        而绕过了draw()方法，当它有背景的时候就调用draw()方法，
        而draw()方法里包含了dispatchDraw()方法的调用。
        因此要在ViewGroup上绘制东西的时候往往重写的是dispatchDraw()方法而不是onDraw()方法，
        或者自定制一个Drawable，重写它的draw(Canvas c)和
        getIntrinsicWidth()，getIntrinsicHeight()方法，然后设为背景。












